// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth ------------------------------------------------------------------------

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  books         Book[]
  authors       Author[]
  followers     User[]    @relation("followers")
  following     User[]    @relation("following")

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  Follower User?   @relation(name: "followers", fields: [userId], references: [id])
  userId   String?

  Following   User?   @relation(name: "following", fields: [followingId], references: [id])
  followingId String?

  @@index([userId])
  @@index([followingId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Book {
  id              String     @id @default(cuid())
  imageUrl        String
  isFavourite     Boolean    @default(false)
  bookName        String
  bookGenre       String
  bookPublisher   String
  bookISBN        String
  bookYear        String
  bookDescription String     @db.Text
  bookStatus      BookStatus @default(NOT_REDED)

  bookNotes BookNote[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  authorId String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([authorId])
}

model BookNote {
  id          String  @id @default(cuid())
  note        String  @db.Text
  page        Int
  isQuotation Boolean

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}

enum BookStatus {
  READED
  READING
  NOT_REDED
  WISH_LIST
}

model Author {
  id       String @id @default(cuid())
  imageUrl String
  name     String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  books  Book[]

  @@index([userId])
}
